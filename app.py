# -*- coding: utf-8 -*-
"""
Objetivo do Agente de IA:
Este script implementa um agente de An√°lise Explorat√≥ria de Dados (EDA) utilizando Streamlit,
Pandas, LangChain e o modelo Gemini do Google. O agente √© projetado para ser gen√©rico,
permitindo que os usu√°rios fa√ßam upload de qualquer arquivo CSV, fa√ßam perguntas, recebam
respostas textuais e visualizem gr√°ficos gerados pela an√°lise.
"""

# Passo 1: Instala√ß√£o e Importa√ß√£o das Bibliotecas
# -------------------------------------------------
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.chat_history import InMemoryChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# Layout Moderno com Cores ESG ---
# Substitua a sua fun√ß√£o antiga por esta
def aplicar_estilo_moderno():
    """Aplica um CSS customizado para um layout moderno com cores ESG."""
    estilo_css = """
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&display=swap');

        html, body, [class*="st-"] {
            font-family: 'Source Sans Pro', sans-serif;
        }

        /* Cor de fundo principal */
        .stApp {
            background-color: #F0F2F6;
        }

        /* Sidebar */
        [data-testid="stSidebar"] {
            background-color: #FFFFFF;
            border-right: 1px solid #E6EAF1;
        }

        /* T√≠tulos */
        h1, h2 {
            color: #1A3A5A; /* Azul Corporativo Escuro */
        }
        
        /* T√≠tulo "Configura√ß√µes" na Sidebar */
        [data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 {
             color: #00A896; /* Verde ESG */
        }

        /* Bot√µes */
        .stButton>button {
            border-radius: 20px;
            border: 1px solid #00A896; /* Verde ESG */
            background-color: #00A896;
            color: white;
            transition: all 0.2s ease-in-out;
        }
        .stButton>button:hover {
            background-color: white;
            color: #00A896;
        }

        /* Chat bubbles */
        [data-testid="stChatMessage"] {
            border-radius: 20px;
            padding: 1em;
            margin-bottom: 1em;
        }
        
        /* Chat do Assistente (IA) */
        [data-testid="stChatMessage"]:has(span[data-testid="chat-avatar-assistant"]) {
            background-color: #FFFFFF;
            border: 1px solid #E6EAF1;
        }

        /* Chat do Usu√°rio */
        [data-testid="stChatMessage"]:has(span[data-testid="chat-avatar-user"]) {
            background-color: #D6F1EE; /* Fundo verde claro */
        }

        /* --- NOVAS REGRAS ADICIONADAS AQUI --- */

        /* Estilo para o texto (label) acima da caixa de input da API Key */
        [data-testid="stSidebar"] .st-emotion-cache-1y4p8pa p {
            color: #1A3A5A;
            font-weight: 600;
        }
        
        /* Estilo para a caixa de input da API Key na sidebar */
        [data-testid="stSidebar"] input[type="password"] {
            background-color: #D6F1EE; /* O mesmo verde claro do chat do usu√°rio */
            border: 1px solid #00A896;
            border-radius: 5px;
        }
    </style>
    """
    st.markdown(estilo_css, unsafe_allow_html=True)

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(page_title="Agente de An√°lise de Dados", page_icon="üïµÔ∏è", layout="wide")

# Aplica o estilo
aplicar_estilo_moderno()

st.title("üïµÔ∏è Agente de An√°lise de Dados com Gemini")
st.write(
    "**Voc√™ √© um Analista de dados.** "
    "Sua tarefa √© analisar os dados carregados e responder perguntas sobre eles "
    "e retornar textos, explica√ß√µes e representa√ß√µes gr√°ficas. Para come√ßar, insira sua API Key do Google e fa√ßa o upload de um arquivo CSV."
)

# --- Fun√ß√µes Principais ---

@st.cache_resource
def get_llm(google_api_key):
    """
    Inicializa e retorna o modelo de linguagem (LLM) do Google Gemini.
    """
    # Modelo corrigido para uma vers√£o v√°lida e o par√¢metro obsoleto removido
    return ChatGoogleGenerativeAI(
        model="gemini-2.5-flash",
        google_api_key=google_api_key,
        temperature=0,
        convert_system_message_to_human=True
    )

@st.cache_data
def load_csv(uploaded_file):
    """
    Carrega o arquivo CSV enviado pelo usu√°rio para o agente.
    """
    try:
        df = pd.read_csv(uploaded_file)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo CSV: {e}")
        return None

# Sistema de armazenamento de hist√≥rico de chat na mem√≥ria
store = {}
def get_session_history(session_id: str):
    """Obt√©m ou cria um hist√≥rico de chat para uma sess√£o espec√≠fica."""
    if session_id not in store:
        store[session_id] = InMemoryChatMessageHistory()
    return store[session_id]

# Fun√ß√£o para Limpar o Chat
def limpar_chat():
    """Limpa o hist√≥rico de mensagens e reseta o estado do arquivo carregado."""
    st.session_state.messages = []
    if 'df_loaded' in st.session_state:
        del st.session_state['df_loaded']

# --- Interface do Streamlit ---

with st.sidebar:
    st.header("Configura√ß√µes")
    google_api_key = st.text_input("Insira sua Chave de API do Google Gemini e precione ENTER", type="password")
    
    # Bot√£o para limpar o chat/reiniciar
    st.button("Limpar Chat e Reiniciar", on_click=limpar_chat, use_container_width=True)

    st.info(
    """
    **üí° Bem-vindo ao Agente de An√°lise de Dados! Siga os passos abaixo para come√ßar:**
    
    üìù O arquivo `csv` pode ser baixado em: 
    
       ‚û°Ô∏è [Kaggle](https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud)
       Ô∏è ou carregado dentro do seu computador.

    üìù Para sua seguran√ßa seguran√ßa, a chave necess√°ria para ativar a intelig√™ncia do agente n√£o ficar√° armazenada.

    1.  Carregue seu Arquivo CSV: 
        
        ‚úÖ Clique no bot√£o "Browse files" aolado e selecione o arquivo CSV que voc√™ deseja analisar.
        
        ‚úÖ O agente ir√° carregar os dados e exibir as primeiras linhas para confirma√ß√£o.

    2.  **Fa√ßa suas Perguntas:**
        
        ‚úÖ Utilize o campo de chat na parte inferior da p√°gina para fazer perguntas em linguagem natural sobre seus dados.

    **Exemplos de perguntas que voc√™ pode fazer:**
    
    ‚û°Ô∏è `Analise os tipos de dados informando o tipo de cada um deles, se tem valores ausentes ou valores repetidos. fa√ßa uma analise destes dados.`
    
    ‚û°Ô∏è `Qual a vari√°vel ou vari√°veis pode ou podem ser ou serem usada(s) para gerar um gr√°fico de outliers?`
    
    ‚û°Ô∏è `Gere o(s) gr√°fico(s) de outliers da vari√°vel ou vari√°veis que podem ser ou serem usada(s). Caso tenha mais de um coloque lado a lado.`
    
    ‚û°Ô∏è `Qual a correla√ß√£o entre as colunas nos dados?`
    
    ‚û°Ô∏è `Gere um gr√°fico destas corela√ß√µes.`
    
    ‚û°Ô∏è `Voce poderia aplicar algum metodo de classifica√ß√£o? Qual vari√°veil possivel? Aplique este m√©todo desta vari√°vel e diga como obtece esta conclus√£o.`
    
    ‚û°Ô∏è `Quais s√£o as principais conclus√µes que podemos tirar destes dados e das analises geradas?`
    """
    )

# Verifica√ß√£o inicial da chave de API
if not google_api_key:
    st.warning("Por favor, insira sua chave de API na barra lateral para habilitar o agente.")
    st.stop()

uploaded_file = st.file_uploader("Fa√ßa o upload do seu arquivo CSV aqui para sua an√°lise", type="csv")
if uploaded_file is None:
    st.info("Aguardando o carregamento de um arquivo CSV...")
    st.stop()

if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibe o hist√≥rico do chat
for message in st.session_state.messages:
    with st.chat_message(message.type):
        if "plot" in message.additional_kwargs:
            st.markdown(message.content)
            st.pyplot(message.additional_kwargs["plot"])
        else:
            st.markdown(message.content)

# L√≥gica principal
if uploaded_file is not None:
    df = load_csv(uploaded_file)

    if df is not None:
        if not hasattr(st.session_state, 'df_loaded') or not st.session_state.df_loaded:
             st.success("Arquivo CSV carregado com sucesso! Veja as cinco primeiras linhas:")
             st.dataframe(df.head())
             st.session_state.df_loaded = True

        try:
            llm = get_llm(google_api_key)
        except Exception as e:
            # Tratamento de erro para chave de API inv√°lida
            if "API key is invalid" in str(e):
                st.error("Digite o token da LLM Gemini corretamente.")
            else:
                st.error(f"Ocorreu um erro ao inicializar o modelo: {e}")
            st.stop()
        
        agent_persona = """
        Voc√™ √© um Analista de dados e especialista em Python, Pandas, Matplotlib e Seaborn. Sua tarefa √© analisar os dados carregados e analisa-los.
        - Voc√™ deve responder a perguntas sobre o DataFrame (dados) `df` carregado.
        - Voc√™ tem acesso a uma ferramenta para executar c√≥digo Python internamente.
        - Para responder, voc√™ DEVE gerar e executar um c√≥digo Python v√°lido usando a ferramenta `python_repl_ast`.
        - O DataFrame est√° dispon√≠vel como a vari√°vel `df`.
        - **IMPORTANTE para gr√°ficos**: Se a pergunta do usu√°rio pedir um gr√°fico, GERE O C√ìDIGO para criar o gr√°fico usando matplotlib ou seaborn. N√ÉO use `st.pyplot()` no c√≥digo que voc√™ gera. Apenas gere o c√≥digo de plotagem padr√£o. A interface se encarregar√° de exibi-lo.
        - Baseie-se nos dados carregados do CSV.
        - Para dados num√©ricos decimais retorne penas duas casas decimais.
        - N√£o ivente nada, se basear nos dados carregados.
        - Se ouver resposta textual em ingles, traduza para o portugu√™s.
        - Seja conciso e direto ao ponto.
        - Sempre que poss√≥vel, forne√ßa respostas em formato de tabela para melhor visualiza√ß√£o.
        - Use gr√°ficos para ilustrar tend√™ncia, distribui√ß√µes e correla√ß√µes nos dados.
        - Os gr√°ficos recomendados incluem histogramas, gr√°ficos de barras, gr√°ficos de linhas, gr√°ficos de dispers√£o, mapas de calor ou outros gr√°ficos.
        - Sempre que poss√≠vel, utilize gr√°ficos para complementar suas respostas.
        - Explique suas conclus√µes de forma clara.
        - Caso n√£o saiba a informa√ß√£o, responda: "N√£o sei informar o que voc√™ pediu. Estou pronto para sua pr√≥xima pergunta ou instru√ß√£o."
        - Ap√≥s gerar um gr√°fico, forne√ßa tamb√©m uma breve explica√ß√£o textual sobre o que o gr√°fico que voc√™ gerou.
        - Ao responder, n√£o mostre o c√≥digo Python gerado, a menos que seja explicitamente solicitado. Apenas mostre o resultado (texto, tabelas ou gr√°ficos).
        - Se o agente responder o texto em ingl√™s, traduza para portugu√™s.
        """
        
        prompt_template = ChatPromptTemplate.from_messages([
            ("system", agent_persona),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])
        
        agent = create_pandas_dataframe_agent(
            llm=llm,
            df=df,
            prompt=prompt_template,
            verbose=False, # Alterado para False para uma UI mais limpa
            allow_dangerous_code=True,
            agent_executor_kwargs={"handle_parsing_errors": True}
        )
        
        agent_with_memory = RunnableWithMessageHistory(
            agent, get_session_history,
            input_messages_key="input", history_messages_key="chat_history",
        )
        
        if prompt := st.chat_input("Qual an√°lise deseja realizar?"):
            st.session_state.messages.append(HumanMessage(content=prompt))
            with st.chat_message("user"):
                st.markdown(prompt)

            with st.chat_message("assistant"):
                with st.spinner("Aguarde, analisando os dados..."):
                    try:
                        plt.clf() 
                        config = {"configurable": {"session_id": "user_session"}}
                        response = agent_with_memory.invoke({"input": prompt}, config=config)
                        output = response["output"]
                        st.markdown(output)

                        fig = plt.gcf()
                        if fig.get_axes():
                            st.pyplot(fig)
                            ai_message = AIMessage(content=output, additional_kwargs={"plot": fig})
                        else:
                            ai_message = AIMessage(content=output)
                        st.session_state.messages.append(ai_message)

                    except Exception as e:
                        # Tratamento de erro para cota excedida
                        if "429" in str(e):
                            st.error("Voc√™ excedeu sua cota de an√°lise, tente mais tarde.")
                        else:
                            st.error(f"Ocorreu um erro: {e}")
